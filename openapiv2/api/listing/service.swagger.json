{
  "swagger": "2.0",
  "info": {
    "title": "Listings API",
    "version": "v2"
  },
  "tags": [
    {
      "name": "ListingService",
      "description": "Listings Service provides a service for listing related operations\nThis includes retrieving listings as well as sending back statuses to Zentail"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v2/storefront/listing": {
      "get": {
        "summary": "List retrieves a list of listings based on the provided query parameters",
        "operationId": "ListingService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listing_apiListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "lastUpdateTs",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "nextToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageLength",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skus",
            "description": "protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ListingService"
        ]
      }
    },
    "/v2/storefront/listing/variant/{sku}/errors": {
      "post": {
        "summary": "ReplaceErrors replaces the errors for a variant",
        "operationId": "ListingService_ReplaceErrors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listing_apiReplaceErrorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/listing_apiError"
                  }
                }
              },
              "title": "ReplaceErrorsRequest provides all the channel-generated errors for a SKU"
            }
          }
        ],
        "tags": [
          "ListingService"
        ]
      }
    },
    "/v2/storefront/listing/variant/{sku}/status": {
      "post": {
        "summary": "UpdateStatus updates the status of a listing",
        "operationId": "ListingService_UpdateStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listing_apiUpdateStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/definitions/listing_apiStandardStatus"
                },
                "channelStatus": {
                  "type": "string"
                },
                "channelId": {
                  "type": "string",
                  "description": "The channel's ID for this particular SKU.\nShould be more specific than Listing."
                },
                "listingUrl": {
                  "type": "string"
                }
              },
              "title": "UpdateStatusRequest provides the status of a SKU"
            }
          }
        ],
        "tags": [
          "ListingService"
        ]
      }
    },
    "/v2/storefront/listing/{listingId}": {
      "get": {
        "summary": "Get retrieves a single listing by its ID",
        "operationId": "ListingService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listing_apiListing"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listingId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ListingService"
        ]
      }
    }
  },
  "definitions": {
    "AttributeMultiText": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "MultiText supports a value that has multiple sub-values\n(e.g. bullet points)"
    },
    "AttributeNumericWithUnits": {
      "type": "object",
      "properties": {
        "numeric": {
          "type": "number",
          "format": "double"
        },
        "units": {
          "type": "string"
        }
      },
      "title": "NumericWithUnits supports values like 1 lb"
    },
    "AttributeSource": {
      "type": "string",
      "enum": [
        "SOURCE_UNSPECIFIED",
        "SOURCE_MAPPED_FROM_CODEC",
        "SOURCE_ATTRIBUTE_OVERRIDE",
        "SOURCE_ATTRIBUTE_DEFAULT_VALUE"
      ],
      "default": "SOURCE_UNSPECIFIED"
    },
    "ErrorSeverity": {
      "type": "string",
      "enum": [
        "SEVERITY_UNSPECIFIED",
        "SEVERITY_NOTICE",
        "SEVERITY_WARNING",
        "SEVERITY_ERROR"
      ],
      "default": "SEVERITY_UNSPECIFIED"
    },
    "ListingVariant": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/listing_apiAttribute"
          }
        },
        "totalInventory": {
          "type": "string",
          "format": "int64",
          "title": "total_inventory should be the sum of merchant_fulfillable_inventory\nand storefront_fulfillable_inventory"
        },
        "merchantFulfillableInventory": {
          "type": "string",
          "format": "int64"
        },
        "storefrontFulfillableInventory": {
          "type": "string",
          "format": "int64"
        },
        "settings": {
          "$ref": "#/definitions/listing_apiSettings",
          "description": "Any Integration-level Settings will be merged\nwith Variant-level Settings to produce these Settings."
        }
      }
    },
    "listing_apiAttribute": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "textValue": {
          "type": "string"
        },
        "numericValue": {
          "type": "number",
          "format": "double"
        },
        "numericWithUnitsValue": {
          "$ref": "#/definitions/AttributeNumericWithUnits"
        },
        "multiTextValue": {
          "$ref": "#/definitions/AttributeMultiText"
        },
        "source": {
          "$ref": "#/definitions/AttributeSource"
        }
      },
      "title": "Attribute has data that describes a Listing or a Listing's Variants"
    },
    "listing_apiError": {
      "type": "object",
      "properties": {
        "attributeIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "One or more attributes that this error applies to"
        },
        "severity": {
          "$ref": "#/definitions/ErrorSeverity"
        },
        "type": {
          "$ref": "#/definitions/listing_apiErrorType"
        },
        "message": {
          "type": "string",
          "title": "Message is required if Type is TYPE_OTHER"
        }
      }
    },
    "listing_apiErrorType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_MISSING_VALUE",
        "TYPE_INVALID_VALUE",
        "TYPE_RESTRICTED_VALUE",
        "TYPE_OTHER"
      ],
      "default": "TYPE_UNSPECIFIED"
    },
    "listing_apiListResponse": {
      "type": "object",
      "properties": {
        "listings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/listing_apiListing"
          }
        },
        "nextToken": {
          "type": "string",
          "description": "next_token is a token that can be provided to List request\nto get the next page of results.\nNext tokens are only valid for 5 minutes after being returned.\nIf no `nextToken` is provided, there are no more results to return."
        }
      }
    },
    "listing_apiListing": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "categoryId": {
          "type": "string"
        },
        "productTypeId": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/listing_apiAttribute"
          }
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListingVariant"
          },
          "title": "the channel\nThese should be in the order that are intended to be displayed one"
        },
        "pivotAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "These are attribute IDs that should have a corresponding Attribute in each\nVariant's list of Attributes"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Listing is a representation of a product to be sold on a Channel"
    },
    "listing_apiReplaceErrorsResponse": {
      "type": "object",
      "title": "ReplaceErrorsResponse is empty"
    },
    "listing_apiSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "stringValue": {
          "type": "string"
        },
        "boolValue": {
          "type": "boolean"
        }
      },
      "description": "Settings represent Listing Settings at any level (Variant, Integration, etc)."
    },
    "listing_apiStandardStatus": {
      "type": "string",
      "enum": [
        "STANDARD_STATUS_UNSPECIFIED",
        "STANDARD_STATUS_PUBLISHED",
        "STANDARD_STATUS_UNPUBLISHED",
        "STANDARD_STATUS_SUPPRESSED",
        "STANDARD_STATUS_RETIRED"
      ],
      "default": "STANDARD_STATUS_UNSPECIFIED",
      "title": "StandardStatus is the standardized status of a listing as defined by Zentail"
    },
    "listing_apiUpdateStatusResponse": {
      "type": "object",
      "title": "UpdateStatusResponse is empty"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
