// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package listing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListingServiceClient is the client API for ListingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListingServiceClient interface {
	// Get retrieves a single listing by its ID
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Listing, error)
	// GetVariant retrieves a single variant by its SKU
	GetVariant(ctx context.Context, in *GetVariantRequest, opts ...grpc.CallOption) (*Variant, error)
	// ListNewListings will list any listing created or updated
	// since the given timestamp where:
	//
	// 1. Product data is enabled for at least one Variant in the Listing
	//
	// 2. No variants have a channel ID
	ListNewListings(ctx context.Context, in *ListSinceRequest, opts ...grpc.CallOption) (*ListListingsResponse, error)
	// ListUpdateListings will return any listing that:
	//
	// 1. Has at least one Variant with a channel ID
	//
	// 2. Has a Product Data change since the last timestamp (including Variants)
	//
	// 3. Product Data is enabled for the Listing
	ListUpdatedListings(ctx context.Context, in *ListSinceRequest, opts ...grpc.CallOption) (*ListListingsResponse, error)
	// ListVariantsWithUpdatedInventory will return any variant that:
	//
	// 1. Has an inventory change since the last timestamp
	//
	// 2. Inventory Data is enabled for the Variant
	ListVariantsWithUpdatedInventory(ctx context.Context, in *ListInventorySinceRequest, opts ...grpc.CallOption) (*ListVariantsResponse, error)
	// ListVariantsWithUpdatedPricing will return any variant that:
	//
	// 1. Has a pricing change since the last timestamp
	//
	// 2. Pricing Data is enabled for the Variant
	ListVariantsWithUpdatedPricing(ctx context.Context, in *ListSinceRequest, opts ...grpc.CallOption) (*ListVariantsResponse, error)
	// UpdateStatus updates the status of a listing
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	// UpdateChannelListingID updates the channel ID for the listing
	UpdateChannelListingID(ctx context.Context, in *UpdateChannelListingIDRequest, opts ...grpc.CallOption) (*UpdateChannelListingIDResponse, error)
	// ReplaceErrors replaces the errors for a variant
	ReplaceErrors(ctx context.Context, in *ReplaceErrorsRequest, opts ...grpc.CallOption) (*ReplaceErrorsResponse, error)
	// ReplaceSubmissions replaces the submissions for a variant
	ReplaceSubmissions(ctx context.Context, in *ReplaceSubmissionsRequest, opts ...grpc.CallOption) (*ReplaceSubmissionsResponse, error)
	// SetInventorySubmissionDetails is used to set the inventory details for a
	// given submission
	SetInventorySubmissionDetails(ctx context.Context, in *SetInventorySubmissionDetailsRequest, opts ...grpc.CallOption) (*SetInventorySubmissionDetailsResponse, error)
}

type listingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListingServiceClient(cc grpc.ClientConnInterface) ListingServiceClient {
	return &listingServiceClient{cc}
}

func (c *listingServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Listing, error) {
	out := new(Listing)
	err := c.cc.Invoke(ctx, "/listing_api.ListingService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) GetVariant(ctx context.Context, in *GetVariantRequest, opts ...grpc.CallOption) (*Variant, error) {
	out := new(Variant)
	err := c.cc.Invoke(ctx, "/listing_api.ListingService/GetVariant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) ListNewListings(ctx context.Context, in *ListSinceRequest, opts ...grpc.CallOption) (*ListListingsResponse, error) {
	out := new(ListListingsResponse)
	err := c.cc.Invoke(ctx, "/listing_api.ListingService/ListNewListings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) ListUpdatedListings(ctx context.Context, in *ListSinceRequest, opts ...grpc.CallOption) (*ListListingsResponse, error) {
	out := new(ListListingsResponse)
	err := c.cc.Invoke(ctx, "/listing_api.ListingService/ListUpdatedListings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) ListVariantsWithUpdatedInventory(ctx context.Context, in *ListInventorySinceRequest, opts ...grpc.CallOption) (*ListVariantsResponse, error) {
	out := new(ListVariantsResponse)
	err := c.cc.Invoke(ctx, "/listing_api.ListingService/ListVariantsWithUpdatedInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) ListVariantsWithUpdatedPricing(ctx context.Context, in *ListSinceRequest, opts ...grpc.CallOption) (*ListVariantsResponse, error) {
	out := new(ListVariantsResponse)
	err := c.cc.Invoke(ctx, "/listing_api.ListingService/ListVariantsWithUpdatedPricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, "/listing_api.ListingService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) UpdateChannelListingID(ctx context.Context, in *UpdateChannelListingIDRequest, opts ...grpc.CallOption) (*UpdateChannelListingIDResponse, error) {
	out := new(UpdateChannelListingIDResponse)
	err := c.cc.Invoke(ctx, "/listing_api.ListingService/UpdateChannelListingID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) ReplaceErrors(ctx context.Context, in *ReplaceErrorsRequest, opts ...grpc.CallOption) (*ReplaceErrorsResponse, error) {
	out := new(ReplaceErrorsResponse)
	err := c.cc.Invoke(ctx, "/listing_api.ListingService/ReplaceErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) ReplaceSubmissions(ctx context.Context, in *ReplaceSubmissionsRequest, opts ...grpc.CallOption) (*ReplaceSubmissionsResponse, error) {
	out := new(ReplaceSubmissionsResponse)
	err := c.cc.Invoke(ctx, "/listing_api.ListingService/ReplaceSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) SetInventorySubmissionDetails(ctx context.Context, in *SetInventorySubmissionDetailsRequest, opts ...grpc.CallOption) (*SetInventorySubmissionDetailsResponse, error) {
	out := new(SetInventorySubmissionDetailsResponse)
	err := c.cc.Invoke(ctx, "/listing_api.ListingService/SetInventorySubmissionDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListingServiceServer is the server API for ListingService service.
// All implementations should embed UnimplementedListingServiceServer
// for forward compatibility
type ListingServiceServer interface {
	// Get retrieves a single listing by its ID
	Get(context.Context, *GetRequest) (*Listing, error)
	// GetVariant retrieves a single variant by its SKU
	GetVariant(context.Context, *GetVariantRequest) (*Variant, error)
	// ListNewListings will list any listing created or updated
	// since the given timestamp where:
	//
	// 1. Product data is enabled for at least one Variant in the Listing
	//
	// 2. No variants have a channel ID
	ListNewListings(context.Context, *ListSinceRequest) (*ListListingsResponse, error)
	// ListUpdateListings will return any listing that:
	//
	// 1. Has at least one Variant with a channel ID
	//
	// 2. Has a Product Data change since the last timestamp (including Variants)
	//
	// 3. Product Data is enabled for the Listing
	ListUpdatedListings(context.Context, *ListSinceRequest) (*ListListingsResponse, error)
	// ListVariantsWithUpdatedInventory will return any variant that:
	//
	// 1. Has an inventory change since the last timestamp
	//
	// 2. Inventory Data is enabled for the Variant
	ListVariantsWithUpdatedInventory(context.Context, *ListInventorySinceRequest) (*ListVariantsResponse, error)
	// ListVariantsWithUpdatedPricing will return any variant that:
	//
	// 1. Has a pricing change since the last timestamp
	//
	// 2. Pricing Data is enabled for the Variant
	ListVariantsWithUpdatedPricing(context.Context, *ListSinceRequest) (*ListVariantsResponse, error)
	// UpdateStatus updates the status of a listing
	UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)
	// UpdateChannelListingID updates the channel ID for the listing
	UpdateChannelListingID(context.Context, *UpdateChannelListingIDRequest) (*UpdateChannelListingIDResponse, error)
	// ReplaceErrors replaces the errors for a variant
	ReplaceErrors(context.Context, *ReplaceErrorsRequest) (*ReplaceErrorsResponse, error)
	// ReplaceSubmissions replaces the submissions for a variant
	ReplaceSubmissions(context.Context, *ReplaceSubmissionsRequest) (*ReplaceSubmissionsResponse, error)
	// SetInventorySubmissionDetails is used to set the inventory details for a
	// given submission
	SetInventorySubmissionDetails(context.Context, *SetInventorySubmissionDetailsRequest) (*SetInventorySubmissionDetailsResponse, error)
}

// UnimplementedListingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedListingServiceServer struct {
}

func (UnimplementedListingServiceServer) Get(context.Context, *GetRequest) (*Listing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedListingServiceServer) GetVariant(context.Context, *GetVariantRequest) (*Variant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariant not implemented")
}
func (UnimplementedListingServiceServer) ListNewListings(context.Context, *ListSinceRequest) (*ListListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNewListings not implemented")
}
func (UnimplementedListingServiceServer) ListUpdatedListings(context.Context, *ListSinceRequest) (*ListListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUpdatedListings not implemented")
}
func (UnimplementedListingServiceServer) ListVariantsWithUpdatedInventory(context.Context, *ListInventorySinceRequest) (*ListVariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariantsWithUpdatedInventory not implemented")
}
func (UnimplementedListingServiceServer) ListVariantsWithUpdatedPricing(context.Context, *ListSinceRequest) (*ListVariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariantsWithUpdatedPricing not implemented")
}
func (UnimplementedListingServiceServer) UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedListingServiceServer) UpdateChannelListingID(context.Context, *UpdateChannelListingIDRequest) (*UpdateChannelListingIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelListingID not implemented")
}
func (UnimplementedListingServiceServer) ReplaceErrors(context.Context, *ReplaceErrorsRequest) (*ReplaceErrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceErrors not implemented")
}
func (UnimplementedListingServiceServer) ReplaceSubmissions(context.Context, *ReplaceSubmissionsRequest) (*ReplaceSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceSubmissions not implemented")
}
func (UnimplementedListingServiceServer) SetInventorySubmissionDetails(context.Context, *SetInventorySubmissionDetailsRequest) (*SetInventorySubmissionDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInventorySubmissionDetails not implemented")
}

// UnsafeListingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListingServiceServer will
// result in compilation errors.
type UnsafeListingServiceServer interface {
	mustEmbedUnimplementedListingServiceServer()
}

func RegisterListingServiceServer(s grpc.ServiceRegistrar, srv ListingServiceServer) {
	s.RegisterService(&ListingService_ServiceDesc, srv)
}

func _ListingService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.ListingService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_GetVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.ListingService/GetVariant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetVariant(ctx, req.(*GetVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_ListNewListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).ListNewListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.ListingService/ListNewListings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).ListNewListings(ctx, req.(*ListSinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_ListUpdatedListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).ListUpdatedListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.ListingService/ListUpdatedListings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).ListUpdatedListings(ctx, req.(*ListSinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_ListVariantsWithUpdatedInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInventorySinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).ListVariantsWithUpdatedInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.ListingService/ListVariantsWithUpdatedInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).ListVariantsWithUpdatedInventory(ctx, req.(*ListInventorySinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_ListVariantsWithUpdatedPricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).ListVariantsWithUpdatedPricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.ListingService/ListVariantsWithUpdatedPricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).ListVariantsWithUpdatedPricing(ctx, req.(*ListSinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.ListingService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_UpdateChannelListingID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelListingIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).UpdateChannelListingID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.ListingService/UpdateChannelListingID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).UpdateChannelListingID(ctx, req.(*UpdateChannelListingIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_ReplaceErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceErrorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).ReplaceErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.ListingService/ReplaceErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).ReplaceErrors(ctx, req.(*ReplaceErrorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_ReplaceSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).ReplaceSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.ListingService/ReplaceSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).ReplaceSubmissions(ctx, req.(*ReplaceSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_SetInventorySubmissionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInventorySubmissionDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).SetInventorySubmissionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.ListingService/SetInventorySubmissionDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).SetInventorySubmissionDetails(ctx, req.(*SetInventorySubmissionDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListingService_ServiceDesc is the grpc.ServiceDesc for ListingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listing_api.ListingService",
	HandlerType: (*ListingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ListingService_Get_Handler,
		},
		{
			MethodName: "GetVariant",
			Handler:    _ListingService_GetVariant_Handler,
		},
		{
			MethodName: "ListNewListings",
			Handler:    _ListingService_ListNewListings_Handler,
		},
		{
			MethodName: "ListUpdatedListings",
			Handler:    _ListingService_ListUpdatedListings_Handler,
		},
		{
			MethodName: "ListVariantsWithUpdatedInventory",
			Handler:    _ListingService_ListVariantsWithUpdatedInventory_Handler,
		},
		{
			MethodName: "ListVariantsWithUpdatedPricing",
			Handler:    _ListingService_ListVariantsWithUpdatedPricing_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _ListingService_UpdateStatus_Handler,
		},
		{
			MethodName: "UpdateChannelListingID",
			Handler:    _ListingService_UpdateChannelListingID_Handler,
		},
		{
			MethodName: "ReplaceErrors",
			Handler:    _ListingService_ReplaceErrors_Handler,
		},
		{
			MethodName: "ReplaceSubmissions",
			Handler:    _ListingService_ReplaceSubmissions_Handler,
		},
		{
			MethodName: "SetInventorySubmissionDetails",
			Handler:    _ListingService_SetInventorySubmissionDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/listing/service.proto",
}
