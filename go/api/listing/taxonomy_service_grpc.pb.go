// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package listing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaxonomyServiceClient is the client API for TaxonomyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaxonomyServiceClient interface {
	// ListProductTypes will return all product types
	ListProductTypes(ctx context.Context, in *ListProductTypesRequest, opts ...grpc.CallOption) (*ListProductTypesResponse, error)
	// CreateProductType will create a new ProductType
	CreateProductType(ctx context.Context, in *CreateProductTypeRequest, opts ...grpc.CallOption) (*CreateProductTypeResponse, error)
	// DeleteProductType will delete the ProductType with the given ID
	DeleteProductType(ctx context.Context, in *DeleteProductTypeRequest, opts ...grpc.CallOption) (*DeleteProductTypeResponse, error)
	// AttributeSpec can be used to retrieve a single AttributeSpec
	AttributeSpec(ctx context.Context, in *AttributeSpecRequest, opts ...grpc.CallOption) (*AttributeSpec, error)
	// CreateAttributeSpec will create a new AttributeSpec
	CreateAttributeSpec(ctx context.Context, in *CreateAttributeSpecRequest, opts ...grpc.CallOption) (*AttributeSpec, error)
	// UpdateAttributeSpec will update the AttributeSpec with the given
	// product_type_id and attribute_spec_id
	UpdateAttributeSpec(ctx context.Context, in *UpdateAttributeSpecRequest, opts ...grpc.CallOption) (*AttributeSpec, error)
	// DeleteAttributeSpec will delete the AttributeSpec with the given
	// product_type_id and attribute_spec_id
	DeleteAttributeSpec(ctx context.Context, in *DeleteAttributeSpecRequest, opts ...grpc.CallOption) (*DeleteAttributeSpecResponse, error)
}

type taxonomyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaxonomyServiceClient(cc grpc.ClientConnInterface) TaxonomyServiceClient {
	return &taxonomyServiceClient{cc}
}

func (c *taxonomyServiceClient) ListProductTypes(ctx context.Context, in *ListProductTypesRequest, opts ...grpc.CallOption) (*ListProductTypesResponse, error) {
	out := new(ListProductTypesResponse)
	err := c.cc.Invoke(ctx, "/listing_api.TaxonomyService/ListProductTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonomyServiceClient) CreateProductType(ctx context.Context, in *CreateProductTypeRequest, opts ...grpc.CallOption) (*CreateProductTypeResponse, error) {
	out := new(CreateProductTypeResponse)
	err := c.cc.Invoke(ctx, "/listing_api.TaxonomyService/CreateProductType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonomyServiceClient) DeleteProductType(ctx context.Context, in *DeleteProductTypeRequest, opts ...grpc.CallOption) (*DeleteProductTypeResponse, error) {
	out := new(DeleteProductTypeResponse)
	err := c.cc.Invoke(ctx, "/listing_api.TaxonomyService/DeleteProductType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonomyServiceClient) AttributeSpec(ctx context.Context, in *AttributeSpecRequest, opts ...grpc.CallOption) (*AttributeSpec, error) {
	out := new(AttributeSpec)
	err := c.cc.Invoke(ctx, "/listing_api.TaxonomyService/AttributeSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonomyServiceClient) CreateAttributeSpec(ctx context.Context, in *CreateAttributeSpecRequest, opts ...grpc.CallOption) (*AttributeSpec, error) {
	out := new(AttributeSpec)
	err := c.cc.Invoke(ctx, "/listing_api.TaxonomyService/CreateAttributeSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonomyServiceClient) UpdateAttributeSpec(ctx context.Context, in *UpdateAttributeSpecRequest, opts ...grpc.CallOption) (*AttributeSpec, error) {
	out := new(AttributeSpec)
	err := c.cc.Invoke(ctx, "/listing_api.TaxonomyService/UpdateAttributeSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonomyServiceClient) DeleteAttributeSpec(ctx context.Context, in *DeleteAttributeSpecRequest, opts ...grpc.CallOption) (*DeleteAttributeSpecResponse, error) {
	out := new(DeleteAttributeSpecResponse)
	err := c.cc.Invoke(ctx, "/listing_api.TaxonomyService/DeleteAttributeSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaxonomyServiceServer is the server API for TaxonomyService service.
// All implementations should embed UnimplementedTaxonomyServiceServer
// for forward compatibility
type TaxonomyServiceServer interface {
	// ListProductTypes will return all product types
	ListProductTypes(context.Context, *ListProductTypesRequest) (*ListProductTypesResponse, error)
	// CreateProductType will create a new ProductType
	CreateProductType(context.Context, *CreateProductTypeRequest) (*CreateProductTypeResponse, error)
	// DeleteProductType will delete the ProductType with the given ID
	DeleteProductType(context.Context, *DeleteProductTypeRequest) (*DeleteProductTypeResponse, error)
	// AttributeSpec can be used to retrieve a single AttributeSpec
	AttributeSpec(context.Context, *AttributeSpecRequest) (*AttributeSpec, error)
	// CreateAttributeSpec will create a new AttributeSpec
	CreateAttributeSpec(context.Context, *CreateAttributeSpecRequest) (*AttributeSpec, error)
	// UpdateAttributeSpec will update the AttributeSpec with the given
	// product_type_id and attribute_spec_id
	UpdateAttributeSpec(context.Context, *UpdateAttributeSpecRequest) (*AttributeSpec, error)
	// DeleteAttributeSpec will delete the AttributeSpec with the given
	// product_type_id and attribute_spec_id
	DeleteAttributeSpec(context.Context, *DeleteAttributeSpecRequest) (*DeleteAttributeSpecResponse, error)
}

// UnimplementedTaxonomyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTaxonomyServiceServer struct {
}

func (UnimplementedTaxonomyServiceServer) ListProductTypes(context.Context, *ListProductTypesRequest) (*ListProductTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductTypes not implemented")
}
func (UnimplementedTaxonomyServiceServer) CreateProductType(context.Context, *CreateProductTypeRequest) (*CreateProductTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductType not implemented")
}
func (UnimplementedTaxonomyServiceServer) DeleteProductType(context.Context, *DeleteProductTypeRequest) (*DeleteProductTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductType not implemented")
}
func (UnimplementedTaxonomyServiceServer) AttributeSpec(context.Context, *AttributeSpecRequest) (*AttributeSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeSpec not implemented")
}
func (UnimplementedTaxonomyServiceServer) CreateAttributeSpec(context.Context, *CreateAttributeSpecRequest) (*AttributeSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttributeSpec not implemented")
}
func (UnimplementedTaxonomyServiceServer) UpdateAttributeSpec(context.Context, *UpdateAttributeSpecRequest) (*AttributeSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttributeSpec not implemented")
}
func (UnimplementedTaxonomyServiceServer) DeleteAttributeSpec(context.Context, *DeleteAttributeSpecRequest) (*DeleteAttributeSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttributeSpec not implemented")
}

// UnsafeTaxonomyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaxonomyServiceServer will
// result in compilation errors.
type UnsafeTaxonomyServiceServer interface {
	mustEmbedUnimplementedTaxonomyServiceServer()
}

func RegisterTaxonomyServiceServer(s grpc.ServiceRegistrar, srv TaxonomyServiceServer) {
	s.RegisterService(&TaxonomyService_ServiceDesc, srv)
}

func _TaxonomyService_ListProductTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxonomyServiceServer).ListProductTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.TaxonomyService/ListProductTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxonomyServiceServer).ListProductTypes(ctx, req.(*ListProductTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxonomyService_CreateProductType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxonomyServiceServer).CreateProductType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.TaxonomyService/CreateProductType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxonomyServiceServer).CreateProductType(ctx, req.(*CreateProductTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxonomyService_DeleteProductType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxonomyServiceServer).DeleteProductType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.TaxonomyService/DeleteProductType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxonomyServiceServer).DeleteProductType(ctx, req.(*DeleteProductTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxonomyService_AttributeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxonomyServiceServer).AttributeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.TaxonomyService/AttributeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxonomyServiceServer).AttributeSpec(ctx, req.(*AttributeSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxonomyService_CreateAttributeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttributeSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxonomyServiceServer).CreateAttributeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.TaxonomyService/CreateAttributeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxonomyServiceServer).CreateAttributeSpec(ctx, req.(*CreateAttributeSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxonomyService_UpdateAttributeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttributeSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxonomyServiceServer).UpdateAttributeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.TaxonomyService/UpdateAttributeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxonomyServiceServer).UpdateAttributeSpec(ctx, req.(*UpdateAttributeSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxonomyService_DeleteAttributeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttributeSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxonomyServiceServer).DeleteAttributeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_api.TaxonomyService/DeleteAttributeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxonomyServiceServer).DeleteAttributeSpec(ctx, req.(*DeleteAttributeSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaxonomyService_ServiceDesc is the grpc.ServiceDesc for TaxonomyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaxonomyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listing_api.TaxonomyService",
	HandlerType: (*TaxonomyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProductTypes",
			Handler:    _TaxonomyService_ListProductTypes_Handler,
		},
		{
			MethodName: "CreateProductType",
			Handler:    _TaxonomyService_CreateProductType_Handler,
		},
		{
			MethodName: "DeleteProductType",
			Handler:    _TaxonomyService_DeleteProductType_Handler,
		},
		{
			MethodName: "AttributeSpec",
			Handler:    _TaxonomyService_AttributeSpec_Handler,
		},
		{
			MethodName: "CreateAttributeSpec",
			Handler:    _TaxonomyService_CreateAttributeSpec_Handler,
		},
		{
			MethodName: "UpdateAttributeSpec",
			Handler:    _TaxonomyService_UpdateAttributeSpec_Handler,
		},
		{
			MethodName: "DeleteAttributeSpec",
			Handler:    _TaxonomyService_DeleteAttributeSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/listing/taxonomy_service.proto",
}
