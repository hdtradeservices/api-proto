syntax = "proto3";
package listing_api;

import "api/listing/listing.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/hdtradeservices/api-proto/go/api/listing";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: { title: "Listings API";
version: "v2";
}
}
;

// ListingService provides a service for listing related operations
// This includes, retrieving listings as well as sending back statuses to
// Zentail.
service ListingService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "Listings Service",
    // protolint:disable:next MAX_LINE_LENGTH
    description: "Listings Service provides a service for listing related operations\nThis includes retrieving listings as well as sending back statuses to Zentail"
  };

  // Get retrieves a single listing by its ID
  rpc Get(GetRequest) returns (Listing) {
    option (google.api.http) = {
      get: "/v2/storefront/listing/{listing_id}"
    };
  }

  // List retrieves a list of listings based on the provided query parameters
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/v2/storefront/listing"
    };
  }

  // UpdateStatus updates the status of a listing
  rpc UpdateStatus(UpdateStatusRequest) returns (UpdateStatusResponse) {
    option (google.api.http) = {
      post: "/v2/storefront/listing/variant/{sku}/status"
      body: "*"
    };
  }

  // ReplaceErrors replaces the errors for a variant
  rpc ReplaceErrors(ReplaceErrorsRequest) returns (ReplaceErrorsResponse) {
    option (google.api.http) = {
      post: "/v2/storefront/listing/variant/{sku}/errors"
      body: "*"
    };
  }
}

// GetRequest is the request object for the Get method
message GetRequest {
  string listing_id = 1;
}

// ListRequest is the request object for the List method
message ListRequest {
  google.protobuf.Timestamp last_update_ts = 1;
  string next_token                        = 2;
  int32 page_length                        = 3;
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string skus = 4;
}

message ListResponse {
  repeated Listing listings = 1;

  // next_token is a token that can be provided to List request
  // to get the next page of results.
  // Next tokens are only valid for 5 minutes after being returned.
  // If no `nextToken` is provided, there are no more results to return.
  string next_token = 2;
}

// StandardStatus is the standardized status of a listing as defined by Zentail
enum StandardStatus {
  STANDARD_STATUS_UNSPECIFIED = 0;
  STANDARD_STATUS_PUBLISHED = 1;
  STANDARD_STATUS_UNPUBLISHED = 2;
  STANDARD_STATUS_SUPPRESSED = 3;
  STANDARD_STATUS_RETIRED = 4;
}

// UpdateStatusRequest provides the status of a SKU
message UpdateStatusRequest {
  string sku = 1;
  StandardStatus status = 2;
  string channel_status = 3;
  // The channel's ID for this particular SKU.
  // Should be more specific than Listing.
  string channel_id = 4;
  string listing_url = 5;
}

// UpdateStatusResponse is empty
message UpdateStatusResponse {
}

// ReplaceErrorsRequest provides all the channel-generated errors for a SKU
message ReplaceErrorsRequest {
  string sku = 1;
  repeated Error errors = 2;
}

message Error {
  // One or more attributes that this error applies to
  repeated string attribute_ids = 1;
  enum Severity {
    SEVERITY_UNSPECIFIED = 0;
    SEVERITY_NOTICE = 1;
    SEVERITY_WARNING = 2;
    SEVERITY_ERROR = 3;
  }
  Severity severity = 2;
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_MISSING_VALUE = 1;
    TYPE_INVALID_VALUE = 2;
    TYPE_RESTRICTED_VALUE = 3;
    TYPE_OTHER = 4;
  }
  Type type = 3;
  // Message is required if Type is TYPE_OTHER
  string message = 4;
}

// ReplaceErrorsResponse is empty
message ReplaceErrorsResponse {
}

